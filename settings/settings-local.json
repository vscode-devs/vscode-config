{
	// window
	"window.menuBarVisibility": "visible", // 在全屏模式下仍然显示窗口顶部菜单（没有菜单很难受）
	"window.dialogStyle": "native", // 就是弹窗的样式，个人还是喜欢默认的
	// vscode更新相关配置
	"update.mode": "manual", // none | manual vscode 自动更新配置
	// 工作台配置
	"workbench.iconTheme": "material-icon-theme", // 图标主题
	"workbench.colorTheme": "One Dark Pro Darker", // 界面主题
	"workbench.sideBar.location": "left", // vscode侧边栏的位置，可选值："left"（默认）或 "right"
	"workbench.activityBar.location": "top", // vscode活动栏(资源管理器、搜索、插件等图标)的位置显示在顶部
	"workbench.list.smoothScrolling": true, // 使文件列表滚动变平滑
	"workbench.editor.enablePreview": true, // true,打开文件时不是“预览”模式，即在编辑一个文件时打开编辑另一个文件不会覆盖当前编辑的文件而是新建一个标签页
	"workbench.editor.wrapTabs": false, // 关闭编辑器标签页在空间不足时以多行显示，关闭后会显示滚动条，鼠标滚轮滑动即可切换标签页
	// 主题外观自定义
	/*
    "workbench.colorCustomizations": {
		"editor.lineHighlightBackground": "#49b2b93d", // 修改光标所在行的背景色
		"editor.lineHighlightBorder": "#ffffff30",     // 修改光标所在行的边框色
		"editor.selectionBackground": "#f5f113",       // 设置用户选中代码段的颜色
		"editor.selectionHighlightBackground": "#f5f113e5",
		"tab.activeBackground": "#5f80629a"            // 设置活动tab窗口颜色
	},
	*/
	// 资源管理器
	"explorer.confirmDelete": true, // 删除文件时是否弹出确认弹窗
	"explorer.confirmDragAndDrop": true, // 往左边文件资源管理器拖动东西来移动/复制时是否显示确认窗口
	// 文本编辑窗口配置
	"editor.fontSize": 16, // 控制字体大小
	"editor.lineHeight": 20, // 行间距
	"editor.fontWeight": 700, // 控制字体粗细
	"editor.fontFamily": "'Courier New', '思源黑体'", // 字体，Courier New作英文字体，思源黑体作中文字体
	"editor.wordBasedSuggestions": "off", // 关闭基于文件中单词来联想的功能（语言自带的联想就够了，开了这个会导致用vscode写MarkDown时的中文引号异常联想）
	"editor.wordWrap": "off", // 在文件内容溢出vscode显示区域时自动折行
	"editor.renderControlCharacters": true, // 编辑器中显示不可见的控制字符
	"editor.renderWhitespace": "selection", // 仅在选定文本上呈现空白字符(选中文本的时候以一个小灰点的样子使空格可见)
	"editor.smoothScrolling": true, // 使编辑器滚动变平滑
	"editor.detectIndentation": false, // 不基于文件内容选择缩进用制表符还是空格, 因为有时候VSCode的判断是错误的
	"editor.insertSpaces": false, // 按tab时插入空格
	"editor.copyWithSyntaxHighlighting": false, // 复制代码时复制纯文本而不是连语法高亮也一起复制
	"editor.suggest.snippetsPreventQuickSuggestions": false, // 这个开不开效果好像都一样，据说是因为一个bug，建议关掉
	"editor.linkedEditing": true, // html标签自动重命名（终于不需要Auto Rename Tag插件了！）
	"editor.cursorSmoothCaretAnimation": "off", // 让光标移动、插入变得平滑(移动过程增加了动画)
	"[markdown]": {
		"editor.quickSuggestions": {
			"other": true,
			"comments": true,
			"strings": true
		}
	},
	// 终端参数配置
	"terminal.integrated.defaultProfile.windows": "Windows PowerShell", // 将终端设为power shell
	"terminal.integrated.rightClickBehavior": "copyPaste", // 在终端中右键时粘贴，改为default则会变成显示菜单
	"terminal.integrated.cursorStyle": "block",
	"terminal.integrated.cursorBlinking": true, // 终端光标闪烁
	"terminal.integrated.lineHeight": 1,
	"terminal.integrated.letterSpacing": 0.5,
	"terminal.integrated.fontSize": 14,
	"terminal.integrated.fontFamily": "Courier",
	"terminal.integrated.fontWeight": 600,
	// 文件相关配置
	"files.autoSave": "onFocusChange", // off | afterDelay | onFocusChange | onWindowChange
	"files.autoGuessEncoding": true, // 编辑器将尝试在打开文件时猜测字符集编码
	"files.encoding": "utf8", // 默认按照utf8格式打开文件（按需求可配置成gb2312）
	"files.exclude": { // 隐藏一些没有必要显示的文件夹，我一般还是喜欢放在工作区配置中，毕竟每个工程可能想要隐藏的不太一样
		"**/.git": true,
		"**/.svn": true,
		"**/.cache": true,
	},
	"files.watcherExclude": { // 不监视一些不必要监视的大文件夹以减少内存和CPU消耗
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/**": true,
		"**/tmp/**": true,
		"**/bower_components/**": true,
		"**/dist/**": true,
		"**/.cache": true,
	},
	// 扩展相关配置
	"extensions.autoUpdate": false, // 插件自动更新
	"extensions.autoCheckUpdates": false, // 插件自动检查更新
	"extensions.ignoreRecommendations": false, // 扩展建议的通知,有时候就很烦这个右下角的建议弹窗
	// manasxx.background-cover
	"backgroundCover.imagePath": "d:\\devSoftware\\vscode-dev\\sumu\\sumu002.jpg",
	"backgroundCover.opacity": 0.13, // 不透明度
	"backgroundCover.blur": 3, // 模糊度
	// 搜索相关配置
	"search.followSymlinks": false, // 据说可以减少vscode的CPU和内存占用
	"search.exclude": { // vscode的搜索还是很快的，但是有些文件夹没有必要去搜索，就可以在这里屏蔽
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},
	// OBKoro1.korofileheader 原始快捷键好像没生效？不懂为什么，这里先改为 Ctrl + Win + /
	// 头部注释
	"fileheader.customMade": {
		// Author字段是文件的创建者 可以在specialOptions中更改特殊属性
		// 公司项目和个人项目可以配置不同的用户名与邮箱 搜索: gitconfig includeIf  比如: https://ayase.moe/2021/03/09/customized-git-config/
		// 自动提取当前git config中的: 用户名、邮箱
		"Author": "git config user.name && git config user.email", // 同时获取用户名与邮箱
		// "Author": "git config user.name", // 仅获取用户名
		// "Author": "git config user.email", // 仅获取邮箱
		// "Author": "OBKoro1", // 写死的固定值 不从git config中获取
		"Date": "Do not edit", // 文件创建时间(不变)
		// LastEditors、LastEditTime、FilePath将会自动更新 如果觉得时间更新的太频繁可以使用throttleTime(默认为1分钟)配置更改更新时间。
		"LastEditors": "git config user.name && git config user.email", // 文件最后编辑者 与Author字段一致
		// 由于编辑文件就会变更最后编辑时间，多人协作中合并的时候会导致merge
		// 可以将时间颗粒度改为周、或者月，这样冲突就减少很多。搜索变更时间格式: dateFormat
		"LastEditTime": "Do not edit", // 文件最后编辑时间
		// 输出相对路径，类似: /文件夹名称/src/index.js
		"FilePath": "Do not edit", // 文件在项目中的相对路径 自动更新
		// 插件会自动将光标移动到Description选项中 方便输入 Description字段可以在specialOptions更改
		"Description": "", // 介绍文件的作用、文件的入参、出参。
		// custom_string_obkoro1~custom_string_obkoro100都可以输出自定义信息
		// 可以设置多条自定义信息 设置个性签名、留下QQ、微信联系方式、输入空行等
		"custom_string_obkoro1": "",
		// 版权声明 保留文件所有权利 自动替换年份 获取git配置的用户名和邮箱
		// 版权声明获取git配置, 与Author字段一致: ${git_name} ${git_email} ${git_name_email}
		"custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by ${git_name_email}, All Rights Reserved. "
		// "custom_string_obkoro1_copyright": "Copyright (c) ${now_year} by 写死的公司名/用户名, All Rights Reserved. "
	},
	// 函数注释
	"fileheader.cursorMode": {
		//"description": "", // 函数注释生成之后，光标移动到这里
		"brief": "",
		"note": "",
		"param": "", // param 开启函数参数自动提取 需要将光标放在函数行或者函数上方的空白行
		"return": "",
	},
	// 插件配置项
	"fileheader.configObj": {
		"autoAdd": false, // 检测文件没有头部注释，自动添加文件头部注释
		"autoAddLine": 100, // 文件超过多少行数 不再自动添加头部注释
		"autoAlready": true, // 只添加插件支持的语言以及用户通过`language`选项自定义的注释
		"supportAutoLanguage": [], // 设置之后，在数组内的文件才支持自动添加
		// 自动添加头部注释黑名单
		"prohibitAutoAdd": [
			"json"
		],
		"prohibitItemAutoAdd": [
			"项目的全称禁止项目自动添加头部注释, 使用快捷键自行添加"
		],
		"folderBlacklist": [
			"node_modules"
		], // 文件夹或文件名禁止自动添加头部注释
		"wideSame": true, // 头部注释等宽设置
		"wideNum": 13, // 头部注释字段长度 默认为13
		"functionWideNum": 7, // 函数注释等宽设置 设为0 即为关闭
		// 头部注释第几行插入
		"headInsertLine": {
			"php": 2 // php文件 插入到第二行
		},
		"beforeAnnotation": {}, // 头部注释之前插入内容
		"afterAnnotation": {}, // 头部注释之后插入内容
		"specialOptions": {}, // 特殊字段自定义 比如: Author、LastEditTime、LastEditors、FilePath、Description、Date等
		"switch": {
			"newlineAddAnnotation": true // 默认遇到换行符(\r\n \n \r)添加注释符号
		},
		"moveCursor": true, // 自动移动光标到Description所在行
		"dateFormat": "YYYY-MM-DD HH:mm:ss",
		"atSymbol": [
			"@",
			"@"
		], // 更改所有文件的自定义注释中的@符号
		"atSymbolObj": {}, //  更改单独语言/文件的@
		"colon": [
			": ",
			" "
		], // 更改所有文件的注释冒号
		"colonObj": {}, //  更改单独语言/文件的冒号
		"filePathColon": "路径分隔符替换", // 默认值： mac: / window是: \
		"showErrorMessage": false, // 是否显示插件错误通知 用于debugger
		"writeLog": false, // 错误日志生成
		"CheckFileChange": false, // 单个文件保存时进行diff检查
		"createHeader": false, // 新建文件自动添加头部注释
		"useWorker": false, // 是否使用工作区设置
		"designAddHead": false, // 添加注释图案时添加头部注释
		"headDesignName": "random", // 图案注释使用哪个图案 
		"headDesign": false, // 是否使用图案注释替换头部注释
		// 自定义配置是否在函数内生成注释 不同文件类型和语言类型
		"cursorModeInternalAll": {}, // 默认为false 在函数外生成函数注释
		"openFunctionParamsCheck": true, // 开启关闭自动提取添加函数参数
		"functionParamsShape": [
			"{",
			"}"
		], // 函数参数外形自定义 
		// "functionParamsShape": "no type" 函数参数不需要类型
		"functionBlankSpaceAll": {}, // 函数注释空格缩进 默认为空对象 默认值为0 不缩进
		"functionTypeSymbol": "*", // 参数没有类型时的默认值
		"typeParamOrder": "type param", // 参数类型 和 参数的位置自定义
		"NoMatchParams": "no show param", // 没匹配到函数参数，是否显示@param与@return这两行 默认不显示param
		"functionParamAddStr": "", // 在 type param 后面增加字符串 可能是冒号，方便输入参数描述
		// 自定义语言注释，自定义取消 head、end 部分
		// 不设置自定义配置language无效 默认都有head、end
		"customHasHeadEnd": {}, // "cancel head and function" | "cancel head" | "cancel function" 
		"throttleTime": 60000, // 对同一个文件 需要过1分钟再次修改文件并保存才会更新注释
		// 自定义语言注释符号，覆盖插件的注释格式
		"language": {
			// js后缀文件
			"js": {
				"head": "/$$",
				"middle": " $ @",
				"end": " $/",
				// 函数自定义注释符号：如果有此配置 会默认使用
				"functionSymbol": {
					"head": "/******* ", // 统一增加几个*号
					"middle": " * @",
					"end": " */"
				},
				"functionParams": "typescript" // 函数注释使用ts语言的解析逻辑
			},
			// 一次匹配多种文件后缀文件 不用重复设置
			"h/hpp/cpp": {
				"head": "/*** ", // 统一增加几个*号
				"middle": " * @",
				"end": " */"
			},
			// 针对有特殊要求的文件如：test.blade.php
			"blade.php": {
				"head": "<!--",
				"middle": " * @",
				"end": "-->",
			}
		},
		// 默认注释  没有匹配到注释符号的时候使用。
		"annotationStr": {
			"head": "/*",
			"middle": " * @",
			"end": " */",
			"use": false
		},
	},
	"[javascript]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"[typescript]": {
		"editor.defaultFormatter": "vscode.typescript-language-features"
	},
	"remote.SSH.remotePlatform": {
		"192.168.81.128": "linux"
	},
	"github.copilot.nextEditSuggestions.enabled": true,
	"github.copilot.enable": {
		"*": true,
		"plaintext": false,
		"markdown": false,
		"scminput": false,
		"yaml": true
	},
	"files.associations": {
		"*.clang-format": "yaml"
	},
}